;;
;; Macros used in SchemeCrossReference site
;; included for the reference
;;

(select-module wiliki.macro)
(use srfi-1)
(use srfi-13)
(use util.list)

;;---------------------------------------------------------------
;; SRFI-related macros

(define-reader-macro (srfis . numbers)
  `((p "Implementing " ,@(wiliki:format-wikiname "SRFI") "s: "
       ,@(append-map (lambda (num)
                       (cons " " (wiliki:format-wikiname #"SRFI-~num")))
                     numbers))))

(define (pick-srfis-macro page-record)
  (cond ((#/\[\[$$srfis ([\s\d]+)\]\]/ page-record)
         => (lambda (m)
              (map x->integer (string-tokenize (m 1)))))
        (else #f)))

(define-reader-macro (srfi-implementors-map)
  (let1 tab (make-hash-table 'eqv?)
    (wiliki:db-for-each
     (lambda (pagename record)
       (cond ((pick-srfis-macro record)
              => (cut map (cut hash-table-push! tab <> pagename) <>)))))
    (list
     `(table
       (@ (style "border-width: 0"))
       ,@(map (lambda (srfi-num&title)
                (let* ((num (car srfi-num&title))
                       (title (cdr srfi-num&title))
                       (popularity (length (hash-table-get tab num '())))
                       (bgcolor (case popularity
                                  ((0) "#ffffff")
                                  ((1) "#fff8f8")
                                  ((2) "#fff0f0")
                                  ((3 4) "#ffe0e0")
                                  ((5 6) "#ffcccc")
                                  ((7 8) "#ffaaaa")
                                  (else "#ff8888"))))
                  `(tr
                    (td (@ (style ,#"background-color: ~bgcolor"))
                        ,@(wiliki:format-wikiname #"SRFI-~num")
                        ": ")
                    (td (@ (style ,#"background-color: ~bgcolor"))
                        ,title)
                    (td (@ (style ,#"background-color: ~bgcolor ; font-size: 60%"))
                        ,(format "[~a implementation~a]"
                                 popularity
                                 (if (= popularity 1) "" "s"))))))
              *final-srfis*)))))

(define-reader-macro (srfi-implementors . maybe-num)
  (let* ((num   (x->integer
                 (get-optional maybe-num
                               (or (and-let* ((p (wiliki-current-page))
                                              (t (ref p 'title))
                                              (m (#/SRFI-(\d+)/ t)))
                                     (m 1))
                                   "-1"))))
         (impls (sort (wiliki:db-fold
                       (lambda (pagename record seed)
                         (cond ((pick-srfis-macro record)
                                => (lambda (srfis)
                                     (if (memv num srfis)
                                       (cons pagename seed)
                                       seed)))
                               (else seed)))
                       '()))))
    `((p "SRFI-" ,(x->string num) " is implemented in "
         ,@(if (null? impls)
             '("(none)")
             (append-map (lambda (impl)
                           (cons " " (wiliki:format-wikiname impl)))
                         impls))))))

;;; The SRFI table below can be obtained by the following code snippet.
#|
(use rfc.http)
(define (get-srfi-info kind) ; kind := final | withdrawn | draft
  (receive (s h c) (http-get "srfi.schemers.org" #"/?statuses=~|kind|")
    (unless (string=? s "200")
      (errorf "couldn't retrieve ~a srfi data (~a)" kind s))
    (with-input-from-string c
      (^[]
        (reverse
         (port-fold (^[line seed]
                      (if-let1 m (#/<li class=\"card (\w+)\"/ line)
                        (if (equal? (m 1) (x->string kind))
                          (if-let1 m (#/<a href=\"srfi-\d+\/\"><span[^>]*>(\d+)<\/span><\/a>: <span[^>]*>(.*?)<\/span>/ line)
                            (acons (x->integer (m 1))
                                   (regexp-replace-all #/<\/?\w+>/ (m 2)
                                                       "")
                                   seed)
                            seed)
                          seed)
                        seed))
                    '()
                    read-line))))))
|#

(define *final-srfis*
  '((190 . "Coroutine Generators")
    (188 . "Splicing binding constructs for syntactic keywords")
    (186 . "Transcoders and transcoded ports")
    (185 . "Linear adjustable-length strings")
    (180 . "JSON")
    (179 . "Nonempty Intervals and Generalized Arrays (Updated)")
    (176 . "Version flag")
    (175 . "ASCII character library")
    (174 . "POSIX Timespecs")
    (173 . "Hooks")
    (172 . "Two Safer Subsets of R7RS")
    (171 . "Transducers")
    (169 . "Underscores in numbers")
    (168 . "Generic Tuple Store Database")
    (167 . "Ordered Key Value Store")
    (165 . "The Environment Monad")
    (164 . "Enhanced multi-dimensional Arrays")
    (163 . "Enhanced array literals")
    (162 . "Comparators sublibrary")
    (161 . "Unifiable Boxes")
    (160 . "Homogeneous numeric vector libraries")
    (159 . "Combinator Formatting")
    (158 . "Generators and Accumulators")
    (157 . "Continuation marks")
    (156 . "Syntactic combiners for binary predicates")
    (155 . "Promises")
    (154 . "First-class dynamic extents")
    (152 . "String Library (reduced)")
    (151 . "Bitwise Operations")
    (150 . "Hygienic ERR5RS Record Syntax (reduced)")
    (149 . "Basic Syntax-rules Template Extensions")
    (148 . "Eager syntax-rules")
    (147 . "Custom macro transformers")
    (146 . "Mappings")
    (145 . "Assumptions")
    (144 . "Flonums")
    (143 . "Fixnums")
    (141 . "Integer division")
    (140 . "Immutable Strings")
    (139 . "Syntax parameters")
    (138 . "Compiling Scheme programs to executables")
    (137 . "Minimal Unique Types")
    (136 . "Extensible record types")
    (135 . "Immutable Texts")
    (134 . "Immutable Deques")
    (133 . "Vector Library (R7RS-compatible)")
    (132 . "Sort Libraries")
    (131 . "ERR5RS Record Syntax (reduced)")
    (130 . "Cursor-based string library")
    (129 . "Titlecase procedures")
    (128 . "Comparators (reduced)")
    (127 . "Lazy Sequences")
    (126 . "R6RS-based hashtables")
    (125 . "Intermediate hash tables")
    (124 . "Ephemerons")
    (123 . "Generic accessor and modifier operators")
    (122 . "Nonempty Intervals and Generalized Arrays")
    (120 . "Timer APIs")
    (119 . "wisp: simpler indentation-sensitive scheme")
    (118 . "Simple adjustable-size strings")
    (117 . "Queues based on lists")
    (116 . "Immutable List Library")
    (115 . "Scheme Regular Expressions")
    (113 . "Sets and bags")
    (112 . "Environment Inquiry")
    (111 . "Boxes")
    (110 . "Sweet-expressions (t-expressions)")
    (109 . "Extended string quasi-literals")
    (108 . "Named quasi-literal constructors")
    (107 . "XML reader syntax")
    (106 . "Basic socket interface")
    (105 . "Curly-infix-expressions")
    (101 . "Purely Functional Random-Access Pairs and Lists")
    (100 . "define-lambda-object")
    (99 . "ERR5RS Records")
    (98 . "An interface to access environment variables")
    (97 . "SRFI Libraries")
    (96 . "SLIB Prerequisites")
    (95 . "Sorting and Merging")
    (94 . "Type-Restricted Numerical Functions")
    (90 . "Extensible hash table constructor")
    (89 . "Optional positional and named parameters")
    (88 . "Keyword objects")
    (87 . "=> in case clauses")
    (86 .
        "MU and NU simulating VALUES & CALL-WITH-VALUES, and their related LET-syntax"
        )
    (78 . "Lightweight testing")
    (74 . "Octet-Addressed Binary Blocks")
    (72 . "Hygienic macros")
    (71 . "Extended LET-syntax for multiple values")
    (70 . "Numbers")
    (69 . "Basic hash tables")
    (67 . "Compare Procedures")
    (66 . "Octet Vectors")
    (64 . "A Scheme API for test suites")
    (63 . "Homogeneous and Heterogeneous Arrays")
    (62 . "S-expression comments")
    (61 . "A more general cond clause")
    (60 . "Integers as Bits")
    (59 . "Vicinity")
    (58 . "Array Notation")
    (57 . "Records")
    (55 . "require-extension")
    (54 . "Formatting")
    (51 . "Handling rest list")
    (49 . "Indentation-sensitive syntax")
    (48 . "Intermediate Format Strings")
    (47 . "Array")
    (46 . "Basic Syntax-rules Extensions")
    (45 . "Primitives for Expressing Iterative Lazy Algorithms")
    (44 . "Collections")
    (43 . "Vector library")
    (42 . "Eager Comprehensions")
    (41 . "Streams")
    (39 . "Parameter objects")
    (38 . "External Representation for Data With Shared Structure")
    (37 . "args-fold: a program argument processor")
    (36 . "I/O Conditions")
    (35 . "Conditions")
    (34 . "Exception Handling for Programs")
    (31 . "A special form `rec' for recursive evaluation")
    (30 . "Nested Multi-line Comments")
    (29 . "Localization")
    (28 . "Basic Format Strings")
    (27 . "Sources of Random Bits")
    (26 . "Notation for Specializing Parameters without Currying")
    (25 . "Multi-dimensional Array Primitives")
    (23 . "Error reporting mechanism")
    (22 . "Running Scheme Scripts on Unix")
    (21 . "Real-time multithreading support")
    (19 . "Time Data Types and Procedures")
    (18 . "Multithreading support")
    (17 . "Generalized set!")
    (16 . "Syntax for procedures of variable arity")
    (14 . "Character-set Library")
    (13 . "String Libraries")
    (11 . "Syntax for receiving multiple values")
    (10 . "#, external form")
    (9 . "Defining Record Types")
    (8 . "receive: Binding to multiple values")
    (7 . "Feature-based program configuration language")
    (6 . "Basic String Ports")
    (5 . "A compatible let form with signatures and rest arguments")
    (4 . "Homogeneous numeric vector datatypes")
    (2 . "AND-LET*: an AND with local bindings, a guarded LET* special form")
    (1 . "List Library")
    (0 . "Feature-based conditional expansion construct")))

;;---------------------------------------------------------------
;; Category macros

(define-reader-macro (category . xs)
  `((div (@ (class category-display))
         ,(format "Categor~a:" (match xs [(_) "ys"][_ "ies"]))
         ,@(intersperse
            "," 
            (map (lambda (x)
                  ;; we'll add link later.
                  `(a ,x))
                 xs)))))
